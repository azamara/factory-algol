// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    private static var __once: () = {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> DateFormatter in
                let formatter = DateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> Date in
                let sourceString = source as! String
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
                fatalError("formatter failed to parse \(sourceString)")
            } 

			// Decoder for Home
            Decoders.addDecoder(clazz: Home.self) { (source: AnyObject) -> Home in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = Home()
                instance.home_id = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["home_id"] as AnyObject)
                instance.humidity = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["humidity"] as AnyObject)
                instance.temperature = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["temperature"] as AnyObject)
                instance.sound = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["sound"] as AnyObject)
                instance.vibration = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["vibration"] as AnyObject)
                instance.dust = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["dust"] as AnyObject)
                return instance
            }
			

			// Decoder for Error
            Decoders.addDecoder(clazz: Error.self) { (source: AnyObject) -> Error in
                let sourceDictionary = source as! [AnyHashable: Any]
                let instance = Error()
                instance.code = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["code"] as AnyObject)
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject)
                instance.fields = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fields"] as AnyObject)
                return instance
            }
			
        }()
    static fileprivate var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as AnyObject }
    }
    
    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
